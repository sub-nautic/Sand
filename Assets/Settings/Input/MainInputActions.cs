//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.9.0
//     from Assets/Settings/Input/MainInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @MainInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInputActions"",
    ""maps"": [
        {
            ""name"": ""Headset"",
            ""id"": ""0eede7bf-bd59-4698-9174-3de6775fcd1e"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""f1795ec8-2034-49b5-96ee-f49577532972"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""2f275351-8a87-4d75-ab9c-a79e3b7264e6"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""e2c01f35-785c-4049-bbe2-7e05129b4684"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""32dffd5d-0035-4f8d-8309-683c4bc4fb5c"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Position"",
                    ""type"": ""Value"",
                    ""id"": ""978ca646-dd30-487e-b30d-22a3abd00570"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""013d768c-bfdd-4d18-9c54-32c83c927b02"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""364376eb-1e75-4efd-8715-121a80736102"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eye Gaze Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""c3f13e67-20ba-4674-be17-00259bae7055"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ddc9040f-2cac-4354-aacd-2fef8fcffb52"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb8588fd-77ac-4281-8953-17be5cedb45c"",
                    ""path"": ""<HandheldARInputDevice>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""945276a6-fa4a-4451-b722-3470f969785e"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d92328b7-e63e-4694-82c0-06595cab41a1"",
                    ""path"": ""<HandheldARInputDevice>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""54251911-78d8-4850-bfc8-c0005fa12b4e"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""ebc60f37-9418-40c3-821e-959dde1552d6"",
                    ""path"": ""<EyeGaze>/pose/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""8628f266-5033-43d7-887e-9199c6e6dc58"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""eb4cffe7-9428-451a-8e96-d9d15b287108"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""6540b6f9-3910-4ab6-b156-e2e43e881a53"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""2cf24122-ca7f-47a1-9b23-7be12487c91f"",
                    ""path"": ""<EyeGaze>/pose/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""f12f6902-eb48-4dd3-9e28-3988ac363c30"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""89d3a607-6f93-456b-87c8-2e8c09f9476f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Integer Fallback"",
                    ""id"": ""90230b5b-a408-477e-8b07-f5f2b4e1f809"",
                    ""path"": ""IntegerFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""7d6e1101-c3ff-4af6-8234-6fad5248054c"",
                    ""path"": ""<EyeGaze>/pose/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""d3b269ee-8518-4995-84d5-8ac4e3fa5cbc"",
                    ""path"": ""<XRHMD>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""6a842e47-02a6-4cfe-9b2f-a016b8a24df3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2e0aadec-4d89-467d-8845-3a47151cace5"",
                    ""path"": ""<XRHMD>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c0a3a6b-cdfd-45ea-815e-93ad80a35040"",
                    ""path"": ""<XRHMD>/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Button Fallback"",
                    ""id"": ""b0676bf8-2919-4645-a255-7716d94e3888"",
                    ""path"": ""ButtonFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""fcfd2c29-6fd9-4b8b-b6da-19b0a811d1aa"",
                    ""path"": ""<EyeGaze>/pose/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""032ea280-7348-4169-bcca-2d1a0e7f7053"",
                    ""path"": ""<XRHMD>/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""90584529-539d-4785-9dad-ef10b2af5696"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Eye Gaze Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""RightHandLocomotion"",
            ""id"": ""226789e3-a9fe-495c-82cb-2fd17c77f350"",
            ""actions"": [
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Button"",
                    ""id"": ""f48534c0-09a1-4ff4-8c83-d387294514d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Value"",
                    ""id"": ""ecc89c91-e443-4a12-857b-27a6fe5a03f2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""2fb20af3-a9d1-4e10-bd56-87a3d635137b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Direction"",
                    ""type"": ""Value"",
                    ""id"": ""6361817a-8e02-413e-bc8c-f2107b6a45b8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""5d85f23f-752b-4a5e-984f-3fb85a32a1d3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e591c292-b1e4-47ac-98e6-252a3bfb1680"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab Move"",
                    ""type"": ""Button"",
                    ""id"": ""77aa689b-1f2e-455b-acfc-50420905c572"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Snap Turn"",
                    ""type"": ""Value"",
                    ""id"": ""b691637d-b341-410e-a3df-187064bac2f4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8f97703-3898-4094-b47e-da441629122d"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller;Default"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6766ca9-6414-4861-b61a-40dc18ac7881"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7437b83-57f8-43e0-b49d-579e3f71765f"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c373a726-011d-4211-809b-349459d54604"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Press(pressPoint=0.7)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller;Default"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""beca4ade-3526-4fb8-9347-6e6891d414a5"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2deaa875-858e-4e8b-8f52-89d83cb9e84d"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cc96d88-af5a-4abc-8dbb-6f7a8670f77a"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0acfb9a9-0574-449c-aece-74ae6c7cad30"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Snap Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHandInteraction"",
            ""id"": ""5bae8a17-794a-44f6-aa3a-1c85548f7a81"",
            ""actions"": [
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""17106b64-96f1-446e-96f1-3102bd1aa8fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab Value"",
                    ""type"": ""Value"",
                    ""id"": ""13c75640-1282-43b5-9ad7-cc5cdb028148"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""ab9625cd-03a6-45a3-a2d6-30c73d33ed2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact Value"",
                    ""type"": ""Value"",
                    ""id"": ""8322885a-3778-4f50-8194-b7a3c690dcde"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Press"",
                    ""type"": ""Button"",
                    ""id"": ""7e527944-c558-4f70-ae53-46a533fa0bfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI Press Value"",
                    ""type"": ""Value"",
                    ""id"": ""5fb616fc-d453-458e-9852-84a79d4c87ff"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""fed6dd4f-2d15-4013-a3df-5004ba3354ef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertY=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""50c001bb-aa73-4e0b-b401-3387a339e266"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Translate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""f28f384e-1a3a-4f65-b2db-7a0f957aed28"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scale Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""d9c62cdd-0c2f-45ad-b8a9-f93597277949"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scale Delta"",
                    ""type"": ""Value"",
                    ""id"": ""11fd1878-0797-4704-af91-bb58605bd378"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f9dad1d-6ca3-4d62-bb1c-1c947047670e"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c617674c-9a2f-4d8e-a424-ba8c83d3db38"",
                    ""path"": ""<MetaAimHand>{RightHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da0471e3-2a79-4a65-8ef4-dd2da953b600"",
                    ""path"": ""<XRController>{RightHand}/{Grip}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f9d848a-fbd9-4b5f-be58-2bae6d6e79ec"",
                    ""path"": ""<MetaAimHand>{RightHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4acae4b-8bcc-4a3a-a506-be3db96684a1"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efd18d18-af2e-47bb-bc3b-c247701c5001"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Interact Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b97749de-fe1c-47d1-a928-f72eef016c9d"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbd9c698-bcec-4ff0-9b3b-23a15ebdaa0d"",
                    ""path"": ""<MetaAimHand>{RightHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8bbcc09-43ca-4e24-ad3a-079c316bb2a8"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5d37429-a483-4a67-a920-0bdf9f41187d"",
                    ""path"": ""<MetaAimHand>{RightHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3cb1decd-e19d-4d0b-a511-fe66d71631d7"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2f07de4-9b4e-4e0a-862c-a9aae6a1196b"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7e4ff9e-559a-480f-b853-07d1c3ae72e2"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc014374-10db-4c52-998f-144f797aca1a"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Scale Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1138a844-85cf-4f69-8f74-0e9eac1a7421"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Scale Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHand"",
            ""id"": ""94760d2c-05a3-4f3e-8917-245c20f6e5ef"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""23deb126-db36-476c-badc-20ea1d3255d1"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""3456e66e-05c5-4b51-8ceb-5136108ff8d1"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""4eeb7152-5790-4cef-81d5-367888d5a375"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""f5f16b30-f673-4a2c-ba4c-97a3cd3700c0"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f4e9806e-9e95-4631-a6e7-b7f8a2524613"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim Position"",
                    ""type"": ""Value"",
                    ""id"": ""b4322548-b195-4401-a45d-a6f1818ca246"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""00105039-5784-474d-b941-bd38dee61c11"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Flags"",
                    ""type"": ""Value"",
                    ""id"": ""a0aea9ca-6217-409c-8646-2913c620a856"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Position"",
                    ""type"": ""Value"",
                    ""id"": ""e00b456a-fe53-4ddb-8b54-d463b40a0b9d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Position"",
                    ""type"": ""Value"",
                    ""id"": ""0e4884d9-26d7-4d4d-a44e-df3c6a9ac0ce"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""74bb044b-e89c-40e3-a8fe-fedb00b92c3c"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Position"",
                    ""type"": ""Value"",
                    ""id"": ""e0f61551-a464-431e-b3d6-974376d1098b"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""5a66a155-5100-496d-8149-9fb38c1560ab"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""c8d86406-11ce-4632-a9b2-c1afe06ae1f2"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""3a62ada2-b33f-48a0-9b7f-7c8f654f50de"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""a92de06a-bf3f-4298-bdfb-d25898bc766f"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""9fad9064-cd00-46cb-b2f8-8b1d7cd35a68"",
                    ""path"": ""<XRHandDevice>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""efff49f6-6d17-445d-8f81-0bf0f7a5833f"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""e2ad7eb7-3a90-42cd-8f0c-e753aeaf5782"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""b614e79f-6682-4aea-9c4b-5273d3ccb2f3"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""2c91e986-3ba4-44bf-9b97-dfcc7621602c"",
                    ""path"": ""<XRHandDevice>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5f51f2af-3190-4cee-aae6-b2ee4108e690"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""224cef45-5ce3-4de3-87a9-fb2cc6b10856"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e1554bc-3452-4b73-a577-49cdec9ba89d"",
                    ""path"": ""<XRHandDevice>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""382a0eb4-ab88-4e63-b97f-340d86630eb2"",
                    ""path"": ""<MetaAimHand>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6e5873e-7be2-41c4-8994-3ed5a11698bb"",
                    ""path"": ""<MetaAimHand>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8edd9f30-c4ae-4586-a58b-d0b19ce98769"",
                    ""path"": ""<XRHandDevice>{RightHand}/pinchPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b15f8e3-5d51-4fad-b8ab-c8c8a2437b6e"",
                    ""path"": ""<XRHandDevice>{RightHand}/pokePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b86fdbb-3e0e-49bb-8ca2-c8f33fc30b71"",
                    ""path"": ""<XRHandDevice>{RightHand}/pokeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28c6ff02-8a6f-4b4e-b386-3261d5f21e49"",
                    ""path"": ""<XRController>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c94f6cb7-426e-4112-a3fb-5e3ea7614746"",
                    ""path"": ""<XRHandDevice>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d708da43-2bbe-4174-a8b3-f5c434eae7b6"",
                    ""path"": ""<MetaAimHand>{RightHand}/aimFlags"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Flags"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ddc8f44-85fc-4504-aadb-7bbd8641c565"",
                    ""path"": ""<XRHandDevice>{RightHand}/gripPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb74979a-9edd-4c0c-bd4f-9bdbb7daebf0"",
                    ""path"": ""<XRHandDevice>{RightHand}/gripRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHandLocomotion"",
            ""id"": ""e3104aaf-ee5d-4a01-b28b-740ed3e9fbbd"",
            ""actions"": [
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Value"",
                    ""id"": ""53731c41-6c16-4e0c-a27a-a0d3ac374f2b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Value"",
                    ""id"": ""a0a1d8ea-1152-4bb8-b536-681357b3f6b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""d413895d-82fa-42e9-a574-e61bdd5e247c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Direction"",
                    ""type"": ""Value"",
                    ""id"": ""b5fc046f-957f-404b-9a3e-fb5189b79d14"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""9201cd04-f4c4-46ce-90a1-6ba356bb91db"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d56530e5-2052-449c-9de0-0d7a058cfe3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab Move"",
                    ""type"": ""Button"",
                    ""id"": ""62fcb3b3-8740-422f-a405-556e23f1a27a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Snap Turn"",
                    ""type"": ""Value"",
                    ""id"": ""a16cee94-a118-485f-aafe-32d2553231f8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""45aeaddb-3aaf-425d-b95c-9cfdeda80b21"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=-1,sweepBehavior=3)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccafd86e-a78f-4ea4-8a15-d55840a59bc0"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72e7b3ee-ec1e-491b-af7a-56969caca146"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b6dd173-df6e-4c6f-a980-ad5eb0ad6dc2"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e18d48d2-37fe-4f2e-81a5-97cf90b87b67"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28ad245e-0a24-43a8-b853-c90d9a246898"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddea414e-b426-411c-b35a-41bab1649915"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ab08b20-a557-4f87-94b6-b795dac63679"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Snap Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHandInteraction"",
            ""id"": ""b51ef90b-9d93-46e6-a3cd-fc0a7b159457"",
            ""actions"": [
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""5724925f-a2a4-471d-9046-6a3cc0989cde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab Value"",
                    ""type"": ""Value"",
                    ""id"": ""3bff102c-232d-43e0-933f-9b0581117456"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""8ba7a4be-d914-4aba-903e-b8eb86b75890"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact Value"",
                    ""type"": ""Value"",
                    ""id"": ""84e24959-e7a0-46ff-83a1-a8cb772e71f0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Press"",
                    ""type"": ""Button"",
                    ""id"": ""c9635316-13d0-4412-ac13-0bd3c9c0f8ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI Press Value"",
                    ""type"": ""Value"",
                    ""id"": ""5f421db1-304e-4044-ab27-7e5e9c381247"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""7e27a7b3-db40-476b-91d0-43882d0cd1a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertY=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""0b2c71ac-5b63-479b-b997-a8747bea5d31"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Translate Anchor"",
                    ""type"": ""Value"",
                    ""id"": ""cd6e8d56-f8fc-4b6c-830e-52d71b388601"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scale Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""29212f1a-b148-4f5c-9135-fae1b18605b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scale Delta"",
                    ""type"": ""Value"",
                    ""id"": ""4fba1ab9-cfd3-4955-8899-8196fb5f766c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e9a454e-b618-4173-beb7-733b370df629"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1a9d1cc-a9a7-4ef1-8674-e975fb30f4ac"",
                    ""path"": ""<MetaAimHand>{LeftHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57beb183-efc5-4e3c-899f-3f6dd16a2271"",
                    ""path"": ""<XRController>{LeftHand}/{Grip}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8aab143-433f-4804-96de-6b03c600069b"",
                    ""path"": ""<MetaAimHand>{LeftHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da00b1a4-e5f6-45ab-b4df-3dc27eb0114e"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57104ceb-b2d8-4e46-bf87-0fbe4d5ce6a1"",
                    ""path"": ""<XRController>{LeftHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Interact Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1ad4e60-bff6-4dfe-ace2-c7e9bcf632c1"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89064e43-9fdf-43a5-9780-c74213d6ad38"",
                    ""path"": ""<MetaAimHand>{LeftHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ae428f9-b86f-415d-a2f2-cbf76e53a81f"",
                    ""path"": ""<XRController>{LeftHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02b8300e-aecc-414e-a7b3-260c292b0e69"",
                    ""path"": ""<MetaAimHand>{LeftHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ad3385d-9f4b-4c61-8627-e45ec9505b10"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef76e82f-c355-4862-87a6-862378c133fd"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Anchor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2716881b-d405-482b-93f9-b2ec86ac0c8a"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42593a62-b73a-4127-9919-7efbab1d3e26"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Scale Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77374d34-de3c-4d86-81d1-b14ce6d20d94"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Scale Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHand"",
            ""id"": ""01e90100-ffdc-4f3e-b4c1-8fae28310941"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""6f0a022a-6936-46a2-84bb-7868970c4d2c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""22480a61-bf1d-4878-b538-8a2c36bc3e30"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""932cd27f-df41-4a51-a2bd-c71a42e5970e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""39db9590-ca9c-4c41-ab4b-1b9a470e7bad"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3ba35f83-2e78-4b28-961f-312cd113d3dd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim Position"",
                    ""type"": ""Value"",
                    ""id"": ""6e760c96-6417-4b23-86a1-a9b0b119a234"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""b0a6e27a-a917-4bb1-9be7-a74240f1fae2"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Flags"",
                    ""type"": ""Value"",
                    ""id"": ""fa6a8107-b66c-49c7-8014-69affb2d3adc"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Position"",
                    ""type"": ""Value"",
                    ""id"": ""f922b88f-1745-4e62-a9f6-896afb5ae0bc"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Position"",
                    ""type"": ""Value"",
                    ""id"": ""fc0b9c4b-92e0-457d-be90-710b8581e4a1"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""d7234547-f1ce-40b1-b430-e1b8115030e8"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Position"",
                    ""type"": ""Value"",
                    ""id"": ""87dfeb0b-d526-4ab9-862b-ef12ff149dc7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grip Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""229c11b0-fbcc-4090-bf60-af0ea7f656bf"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Quaternion Fallback"",
                    ""id"": ""937d2737-37b6-4674-994a-7d81c3730151"",
                    ""path"": ""QuaternionFallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""3d11bc17-ec11-404a-8696-05e81b7a2994"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""223f611a-de4f-4c6c-afbf-fce523256b15"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""8dff9048-e14e-4793-951e-a9ec4a367a4c"",
                    ""path"": ""<XRHandDevice>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Vector 3 Fallback"",
                    ""id"": ""13897e30-e521-4ff2-ac16-41470521e2d0"",
                    ""path"": ""Vector3Fallback"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""first"",
                    ""id"": ""10ac8d6b-501b-44ad-b8c0-aff52124bbb2"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""second"",
                    ""id"": ""b52757da-3939-46b7-b622-cccb1ad6e1c8"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""third"",
                    ""id"": ""62534f7a-d5e8-4d62-a8a6-daf42aeaa285"",
                    ""path"": ""<XRHandDevice>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a59d4431-f5f8-419b-acfd-110d7890ab93"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1c59199f-8912-40e9-ba39-e56b7fb99752"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09f2543d-ac0c-4bb9-a905-8420d27098fd"",
                    ""path"": ""<XRHandDevice>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3f689a0-6fb4-4373-a7fc-57a25b900b50"",
                    ""path"": ""<MetaAimHand>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c7fd71d-be99-49d9-8dac-88b5440b6e69"",
                    ""path"": ""<MetaAimHand>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82c84cde-0e50-4f7e-9431-5fbbf0398b03"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pinchPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f47e816f-0beb-401d-be63-9cee7f58a432"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pokePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d48a7c3-75ac-46c0-ad44-daca3b249edd"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pokeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81bff611-a329-4ec1-9315-7e79090bee9f"",
                    ""path"": ""<XRController>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""949af53e-34e8-4b9a-ac0f-f5808d47aac7"",
                    ""path"": ""<XRHandDevice>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""064db5f2-75e9-42a0-8919-ecddb5905a4e"",
                    ""path"": ""<MetaAimHand>{LeftHand}/aimFlags"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Flags"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cee3db72-017f-47d2-8e19-6eedfc4f9a14"",
                    ""path"": ""<XRHandDevice>{LeftHand}/gripPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a923bfdc-5333-48f1-80a6-1d85635a1a4b"",
                    ""path"": ""<XRHandDevice>{LeftHand}/gripRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grip Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""34f524e9-247e-4315-969b-286cf1f35e79"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""87e96ffc-ab89-4dff-bb4d-02969c605df6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""9ade26fa-13d8-4e68-924f-92460f3999dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""3653fe86-309a-4e29-951d-40ee02b9a0a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""103f59cc-56fd-48ec-ab80-ca4a2fb38751"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1cd6e9fb-bb95-4f89-9ba2-614ce6862d31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f60d60ba-ace8-4091-900b-c18aa6d5d137"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a5eb04b4-9b95-45ed-9eb2-7895cdc957fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""90598f78-0bbd-499d-837a-ada8491060ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5618b7dd-31bf-4fdc-a5d6-99319160d935"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80bea8b1-4858-44f0-9a95-94a9297395ed"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7d0d6c1-1b85-4010-9c55-ce97ea7442ae"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eabcd80f-9b38-4972-95ea-d94f98ab3676"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c87e0157-304c-4b0d-b5a1-efeac4aea53a"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a447d26f-c940-46b1-b240-a8b97e71bad4"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""848c1002-f7c2-416d-b0f4-c9177415186d"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60b30e7a-5209-4775-95ac-fb1b2fcc775f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""a0aded4a-6ad5-4e27-82f6-4ecdee5efafb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2ac747a4-9c4a-4bf8-a026-a9590dd73a20"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f6ae2f69-d4b3-4a84-97b2-2c8fab162e4a"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dbbb027d-4fcb-45c7-b356-8cb9a0ddb3cb"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""68151fab-7f58-4ab9-af90-5866479d8a28"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""27893440-77fe-4c85-9eaf-e8b6f565f40a"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c3c8d7b4-7738-41c2-8ff1-be1fc209e6e2"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""49e3a74b-516e-47a6-8474-21db8ded4d29"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""db3130cd-9a11-4b38-a857-62c53641b2dc"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e39c1100-c622-4cd4-8628-6143c4beebb4"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""20d47007-0655-4342-b29e-07861ed27c35"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""29e06996-63bb-4ade-866f-f3ea029edce0"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""55197a27-ae8c-48e2-a8bf-4a3a570b6bfb"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e5c9fe2b-7c47-4a34-9755-227e3a1258a9"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dfd459ac-4f66-4d7c-ac02-34c973ca12d4"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""43affebe-f819-4909-a1b2-308ae4d6fe8e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""da8932c0-bfd4-491a-bd13-9867427d78d1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0f2380ec-33dc-4bd5-aa03-cca296b6ad44"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d43a5fe8-776f-42d7-a601-dd093bc5d1c8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""10dca98b-32a8-47b7-aff4-2bb2a699a658"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""13b0e262-798f-4364-aafd-4696307e54c6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""60f8d349-d7e6-43f2-89cb-1e73e1d2c0c3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b1bfe19d-87c2-4832-ad21-a08008c5571b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""71ab1457-9967-4163-81af-c90e756e8695"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fd65bab0-dbd3-4523-8dd2-305addf25db8"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""249c9298-0d92-48a2-9201-08e7400c73fd"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f244f318-b714-4e4f-a8cf-935bdb570d99"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Default"",
            ""bindingGroup"": ""Default"",
            ""devices"": []
        }
    ]
}");
        // Headset
        m_Headset = asset.FindActionMap("Headset", throwIfNotFound: true);
        m_Headset_Position = m_Headset.FindAction("Position", throwIfNotFound: true);
        m_Headset_Rotation = m_Headset.FindAction("Rotation", throwIfNotFound: true);
        m_Headset_IsTracked = m_Headset.FindAction("Is Tracked", throwIfNotFound: true);
        m_Headset_TrackingState = m_Headset.FindAction("Tracking State", throwIfNotFound: true);
        m_Headset_EyeGazePosition = m_Headset.FindAction("Eye Gaze Position", throwIfNotFound: true);
        m_Headset_EyeGazeRotation = m_Headset.FindAction("Eye Gaze Rotation", throwIfNotFound: true);
        m_Headset_EyeGazeIsTracked = m_Headset.FindAction("Eye Gaze Is Tracked", throwIfNotFound: true);
        m_Headset_EyeGazeTrackingState = m_Headset.FindAction("Eye Gaze Tracking State", throwIfNotFound: true);
        // RightHandLocomotion
        m_RightHandLocomotion = asset.FindActionMap("RightHandLocomotion", throwIfNotFound: true);
        m_RightHandLocomotion_TeleportSelect = m_RightHandLocomotion.FindAction("Teleport Select", throwIfNotFound: true);
        m_RightHandLocomotion_TeleportModeActivate = m_RightHandLocomotion.FindAction("Teleport Mode Activate", throwIfNotFound: true);
        m_RightHandLocomotion_TeleportModeCancel = m_RightHandLocomotion.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
        m_RightHandLocomotion_TeleportDirection = m_RightHandLocomotion.FindAction("Teleport Direction", throwIfNotFound: true);
        m_RightHandLocomotion_Turn = m_RightHandLocomotion.FindAction("Turn", throwIfNotFound: true);
        m_RightHandLocomotion_Move = m_RightHandLocomotion.FindAction("Move", throwIfNotFound: true);
        m_RightHandLocomotion_GrabMove = m_RightHandLocomotion.FindAction("Grab Move", throwIfNotFound: true);
        m_RightHandLocomotion_SnapTurn = m_RightHandLocomotion.FindAction("Snap Turn", throwIfNotFound: true);
        // RightHandInteraction
        m_RightHandInteraction = asset.FindActionMap("RightHandInteraction", throwIfNotFound: true);
        m_RightHandInteraction_Grab = m_RightHandInteraction.FindAction("Grab", throwIfNotFound: true);
        m_RightHandInteraction_GrabValue = m_RightHandInteraction.FindAction("Grab Value", throwIfNotFound: true);
        m_RightHandInteraction_Interact = m_RightHandInteraction.FindAction("Interact", throwIfNotFound: true);
        m_RightHandInteraction_InteractValue = m_RightHandInteraction.FindAction("Interact Value", throwIfNotFound: true);
        m_RightHandInteraction_UIPress = m_RightHandInteraction.FindAction("UI Press", throwIfNotFound: true);
        m_RightHandInteraction_UIPressValue = m_RightHandInteraction.FindAction("UI Press Value", throwIfNotFound: true);
        m_RightHandInteraction_UIScroll = m_RightHandInteraction.FindAction("UI Scroll", throwIfNotFound: true);
        m_RightHandInteraction_RotateAnchor = m_RightHandInteraction.FindAction("Rotate Anchor", throwIfNotFound: true);
        m_RightHandInteraction_TranslateAnchor = m_RightHandInteraction.FindAction("Translate Anchor", throwIfNotFound: true);
        m_RightHandInteraction_ScaleToggle = m_RightHandInteraction.FindAction("Scale Toggle", throwIfNotFound: true);
        m_RightHandInteraction_ScaleDelta = m_RightHandInteraction.FindAction("Scale Delta", throwIfNotFound: true);
        // RightHand
        m_RightHand = asset.FindActionMap("RightHand", throwIfNotFound: true);
        m_RightHand_Position = m_RightHand.FindAction("Position", throwIfNotFound: true);
        m_RightHand_Rotation = m_RightHand.FindAction("Rotation", throwIfNotFound: true);
        m_RightHand_IsTracked = m_RightHand.FindAction("Is Tracked", throwIfNotFound: true);
        m_RightHand_TrackingState = m_RightHand.FindAction("Tracking State", throwIfNotFound: true);
        m_RightHand_HapticDevice = m_RightHand.FindAction("Haptic Device", throwIfNotFound: true);
        m_RightHand_AimPosition = m_RightHand.FindAction("Aim Position", throwIfNotFound: true);
        m_RightHand_AimRotation = m_RightHand.FindAction("Aim Rotation", throwIfNotFound: true);
        m_RightHand_AimFlags = m_RightHand.FindAction("Aim Flags", throwIfNotFound: true);
        m_RightHand_PinchPosition = m_RightHand.FindAction("Pinch Position", throwIfNotFound: true);
        m_RightHand_PokePosition = m_RightHand.FindAction("Poke Position", throwIfNotFound: true);
        m_RightHand_PokeRotation = m_RightHand.FindAction("Poke Rotation", throwIfNotFound: true);
        m_RightHand_GripPosition = m_RightHand.FindAction("Grip Position", throwIfNotFound: true);
        m_RightHand_GripRotation = m_RightHand.FindAction("Grip Rotation", throwIfNotFound: true);
        // LeftHandLocomotion
        m_LeftHandLocomotion = asset.FindActionMap("LeftHandLocomotion", throwIfNotFound: true);
        m_LeftHandLocomotion_TeleportSelect = m_LeftHandLocomotion.FindAction("Teleport Select", throwIfNotFound: true);
        m_LeftHandLocomotion_TeleportModeActivate = m_LeftHandLocomotion.FindAction("Teleport Mode Activate", throwIfNotFound: true);
        m_LeftHandLocomotion_TeleportModeCancel = m_LeftHandLocomotion.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
        m_LeftHandLocomotion_TeleportDirection = m_LeftHandLocomotion.FindAction("Teleport Direction", throwIfNotFound: true);
        m_LeftHandLocomotion_Turn = m_LeftHandLocomotion.FindAction("Turn", throwIfNotFound: true);
        m_LeftHandLocomotion_Move = m_LeftHandLocomotion.FindAction("Move", throwIfNotFound: true);
        m_LeftHandLocomotion_GrabMove = m_LeftHandLocomotion.FindAction("Grab Move", throwIfNotFound: true);
        m_LeftHandLocomotion_SnapTurn = m_LeftHandLocomotion.FindAction("Snap Turn", throwIfNotFound: true);
        // LeftHandInteraction
        m_LeftHandInteraction = asset.FindActionMap("LeftHandInteraction", throwIfNotFound: true);
        m_LeftHandInteraction_Grab = m_LeftHandInteraction.FindAction("Grab", throwIfNotFound: true);
        m_LeftHandInteraction_GrabValue = m_LeftHandInteraction.FindAction("Grab Value", throwIfNotFound: true);
        m_LeftHandInteraction_Interact = m_LeftHandInteraction.FindAction("Interact", throwIfNotFound: true);
        m_LeftHandInteraction_InteractValue = m_LeftHandInteraction.FindAction("Interact Value", throwIfNotFound: true);
        m_LeftHandInteraction_UIPress = m_LeftHandInteraction.FindAction("UI Press", throwIfNotFound: true);
        m_LeftHandInteraction_UIPressValue = m_LeftHandInteraction.FindAction("UI Press Value", throwIfNotFound: true);
        m_LeftHandInteraction_UIScroll = m_LeftHandInteraction.FindAction("UI Scroll", throwIfNotFound: true);
        m_LeftHandInteraction_RotateAnchor = m_LeftHandInteraction.FindAction("Rotate Anchor", throwIfNotFound: true);
        m_LeftHandInteraction_TranslateAnchor = m_LeftHandInteraction.FindAction("Translate Anchor", throwIfNotFound: true);
        m_LeftHandInteraction_ScaleToggle = m_LeftHandInteraction.FindAction("Scale Toggle", throwIfNotFound: true);
        m_LeftHandInteraction_ScaleDelta = m_LeftHandInteraction.FindAction("Scale Delta", throwIfNotFound: true);
        // LeftHand
        m_LeftHand = asset.FindActionMap("LeftHand", throwIfNotFound: true);
        m_LeftHand_Position = m_LeftHand.FindAction("Position", throwIfNotFound: true);
        m_LeftHand_Rotation = m_LeftHand.FindAction("Rotation", throwIfNotFound: true);
        m_LeftHand_IsTracked = m_LeftHand.FindAction("Is Tracked", throwIfNotFound: true);
        m_LeftHand_TrackingState = m_LeftHand.FindAction("Tracking State", throwIfNotFound: true);
        m_LeftHand_HapticDevice = m_LeftHand.FindAction("Haptic Device", throwIfNotFound: true);
        m_LeftHand_AimPosition = m_LeftHand.FindAction("Aim Position", throwIfNotFound: true);
        m_LeftHand_AimRotation = m_LeftHand.FindAction("Aim Rotation", throwIfNotFound: true);
        m_LeftHand_AimFlags = m_LeftHand.FindAction("Aim Flags", throwIfNotFound: true);
        m_LeftHand_PinchPosition = m_LeftHand.FindAction("Pinch Position", throwIfNotFound: true);
        m_LeftHand_PokePosition = m_LeftHand.FindAction("Poke Position", throwIfNotFound: true);
        m_LeftHand_PokeRotation = m_LeftHand.FindAction("Poke Rotation", throwIfNotFound: true);
        m_LeftHand_GripPosition = m_LeftHand.FindAction("Grip Position", throwIfNotFound: true);
        m_LeftHand_GripRotation = m_LeftHand.FindAction("Grip Rotation", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
        m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
        m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
        m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_ScrollWheel = m_UI.FindAction("ScrollWheel", throwIfNotFound: true);
        m_UI_MiddleClick = m_UI.FindAction("MiddleClick", throwIfNotFound: true);
        m_UI_RightClick = m_UI.FindAction("RightClick", throwIfNotFound: true);
    }

    ~@MainInputActions()
    {
        Debug.Assert(!m_Headset.enabled, "This will cause a leak and performance issues, MainInputActions.Headset.Disable() has not been called.");
        Debug.Assert(!m_RightHandLocomotion.enabled, "This will cause a leak and performance issues, MainInputActions.RightHandLocomotion.Disable() has not been called.");
        Debug.Assert(!m_RightHandInteraction.enabled, "This will cause a leak and performance issues, MainInputActions.RightHandInteraction.Disable() has not been called.");
        Debug.Assert(!m_RightHand.enabled, "This will cause a leak and performance issues, MainInputActions.RightHand.Disable() has not been called.");
        Debug.Assert(!m_LeftHandLocomotion.enabled, "This will cause a leak and performance issues, MainInputActions.LeftHandLocomotion.Disable() has not been called.");
        Debug.Assert(!m_LeftHandInteraction.enabled, "This will cause a leak and performance issues, MainInputActions.LeftHandInteraction.Disable() has not been called.");
        Debug.Assert(!m_LeftHand.enabled, "This will cause a leak and performance issues, MainInputActions.LeftHand.Disable() has not been called.");
        Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, MainInputActions.UI.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Headset
    private readonly InputActionMap m_Headset;
    private List<IHeadsetActions> m_HeadsetActionsCallbackInterfaces = new List<IHeadsetActions>();
    private readonly InputAction m_Headset_Position;
    private readonly InputAction m_Headset_Rotation;
    private readonly InputAction m_Headset_IsTracked;
    private readonly InputAction m_Headset_TrackingState;
    private readonly InputAction m_Headset_EyeGazePosition;
    private readonly InputAction m_Headset_EyeGazeRotation;
    private readonly InputAction m_Headset_EyeGazeIsTracked;
    private readonly InputAction m_Headset_EyeGazeTrackingState;
    public struct HeadsetActions
    {
        private @MainInputActions m_Wrapper;
        public HeadsetActions(@MainInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_Headset_Position;
        public InputAction @Rotation => m_Wrapper.m_Headset_Rotation;
        public InputAction @IsTracked => m_Wrapper.m_Headset_IsTracked;
        public InputAction @TrackingState => m_Wrapper.m_Headset_TrackingState;
        public InputAction @EyeGazePosition => m_Wrapper.m_Headset_EyeGazePosition;
        public InputAction @EyeGazeRotation => m_Wrapper.m_Headset_EyeGazeRotation;
        public InputAction @EyeGazeIsTracked => m_Wrapper.m_Headset_EyeGazeIsTracked;
        public InputAction @EyeGazeTrackingState => m_Wrapper.m_Headset_EyeGazeTrackingState;
        public InputActionMap Get() { return m_Wrapper.m_Headset; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeadsetActions set) { return set.Get(); }
        public void AddCallbacks(IHeadsetActions instance)
        {
            if (instance == null || m_Wrapper.m_HeadsetActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HeadsetActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @EyeGazePosition.started += instance.OnEyeGazePosition;
            @EyeGazePosition.performed += instance.OnEyeGazePosition;
            @EyeGazePosition.canceled += instance.OnEyeGazePosition;
            @EyeGazeRotation.started += instance.OnEyeGazeRotation;
            @EyeGazeRotation.performed += instance.OnEyeGazeRotation;
            @EyeGazeRotation.canceled += instance.OnEyeGazeRotation;
            @EyeGazeIsTracked.started += instance.OnEyeGazeIsTracked;
            @EyeGazeIsTracked.performed += instance.OnEyeGazeIsTracked;
            @EyeGazeIsTracked.canceled += instance.OnEyeGazeIsTracked;
            @EyeGazeTrackingState.started += instance.OnEyeGazeTrackingState;
            @EyeGazeTrackingState.performed += instance.OnEyeGazeTrackingState;
            @EyeGazeTrackingState.canceled += instance.OnEyeGazeTrackingState;
        }

        private void UnregisterCallbacks(IHeadsetActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @EyeGazePosition.started -= instance.OnEyeGazePosition;
            @EyeGazePosition.performed -= instance.OnEyeGazePosition;
            @EyeGazePosition.canceled -= instance.OnEyeGazePosition;
            @EyeGazeRotation.started -= instance.OnEyeGazeRotation;
            @EyeGazeRotation.performed -= instance.OnEyeGazeRotation;
            @EyeGazeRotation.canceled -= instance.OnEyeGazeRotation;
            @EyeGazeIsTracked.started -= instance.OnEyeGazeIsTracked;
            @EyeGazeIsTracked.performed -= instance.OnEyeGazeIsTracked;
            @EyeGazeIsTracked.canceled -= instance.OnEyeGazeIsTracked;
            @EyeGazeTrackingState.started -= instance.OnEyeGazeTrackingState;
            @EyeGazeTrackingState.performed -= instance.OnEyeGazeTrackingState;
            @EyeGazeTrackingState.canceled -= instance.OnEyeGazeTrackingState;
        }

        public void RemoveCallbacks(IHeadsetActions instance)
        {
            if (m_Wrapper.m_HeadsetActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHeadsetActions instance)
        {
            foreach (var item in m_Wrapper.m_HeadsetActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HeadsetActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HeadsetActions @Headset => new HeadsetActions(this);

    // RightHandLocomotion
    private readonly InputActionMap m_RightHandLocomotion;
    private List<IRightHandLocomotionActions> m_RightHandLocomotionActionsCallbackInterfaces = new List<IRightHandLocomotionActions>();
    private readonly InputAction m_RightHandLocomotion_TeleportSelect;
    private readonly InputAction m_RightHandLocomotion_TeleportModeActivate;
    private readonly InputAction m_RightHandLocomotion_TeleportModeCancel;
    private readonly InputAction m_RightHandLocomotion_TeleportDirection;
    private readonly InputAction m_RightHandLocomotion_Turn;
    private readonly InputAction m_RightHandLocomotion_Move;
    private readonly InputAction m_RightHandLocomotion_GrabMove;
    private readonly InputAction m_RightHandLocomotion_SnapTurn;
    public struct RightHandLocomotionActions
    {
        private @MainInputActions m_Wrapper;
        public RightHandLocomotionActions(@MainInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TeleportSelect => m_Wrapper.m_RightHandLocomotion_TeleportSelect;
        public InputAction @TeleportModeActivate => m_Wrapper.m_RightHandLocomotion_TeleportModeActivate;
        public InputAction @TeleportModeCancel => m_Wrapper.m_RightHandLocomotion_TeleportModeCancel;
        public InputAction @TeleportDirection => m_Wrapper.m_RightHandLocomotion_TeleportDirection;
        public InputAction @Turn => m_Wrapper.m_RightHandLocomotion_Turn;
        public InputAction @Move => m_Wrapper.m_RightHandLocomotion_Move;
        public InputAction @GrabMove => m_Wrapper.m_RightHandLocomotion_GrabMove;
        public InputAction @SnapTurn => m_Wrapper.m_RightHandLocomotion_SnapTurn;
        public InputActionMap Get() { return m_Wrapper.m_RightHandLocomotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandLocomotionActions set) { return set.Get(); }
        public void AddCallbacks(IRightHandLocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces.Add(instance);
            @TeleportSelect.started += instance.OnTeleportSelect;
            @TeleportSelect.performed += instance.OnTeleportSelect;
            @TeleportSelect.canceled += instance.OnTeleportSelect;
            @TeleportModeActivate.started += instance.OnTeleportModeActivate;
            @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
            @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
            @TeleportModeCancel.started += instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
            @TeleportDirection.started += instance.OnTeleportDirection;
            @TeleportDirection.performed += instance.OnTeleportDirection;
            @TeleportDirection.canceled += instance.OnTeleportDirection;
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @GrabMove.started += instance.OnGrabMove;
            @GrabMove.performed += instance.OnGrabMove;
            @GrabMove.canceled += instance.OnGrabMove;
            @SnapTurn.started += instance.OnSnapTurn;
            @SnapTurn.performed += instance.OnSnapTurn;
            @SnapTurn.canceled += instance.OnSnapTurn;
        }

        private void UnregisterCallbacks(IRightHandLocomotionActions instance)
        {
            @TeleportSelect.started -= instance.OnTeleportSelect;
            @TeleportSelect.performed -= instance.OnTeleportSelect;
            @TeleportSelect.canceled -= instance.OnTeleportSelect;
            @TeleportModeActivate.started -= instance.OnTeleportModeActivate;
            @TeleportModeActivate.performed -= instance.OnTeleportModeActivate;
            @TeleportModeActivate.canceled -= instance.OnTeleportModeActivate;
            @TeleportModeCancel.started -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled -= instance.OnTeleportModeCancel;
            @TeleportDirection.started -= instance.OnTeleportDirection;
            @TeleportDirection.performed -= instance.OnTeleportDirection;
            @TeleportDirection.canceled -= instance.OnTeleportDirection;
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @GrabMove.started -= instance.OnGrabMove;
            @GrabMove.performed -= instance.OnGrabMove;
            @GrabMove.canceled -= instance.OnGrabMove;
            @SnapTurn.started -= instance.OnSnapTurn;
            @SnapTurn.performed -= instance.OnSnapTurn;
            @SnapTurn.canceled -= instance.OnSnapTurn;
        }

        public void RemoveCallbacks(IRightHandLocomotionActions instance)
        {
            if (m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightHandLocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightHandLocomotionActions @RightHandLocomotion => new RightHandLocomotionActions(this);

    // RightHandInteraction
    private readonly InputActionMap m_RightHandInteraction;
    private List<IRightHandInteractionActions> m_RightHandInteractionActionsCallbackInterfaces = new List<IRightHandInteractionActions>();
    private readonly InputAction m_RightHandInteraction_Grab;
    private readonly InputAction m_RightHandInteraction_GrabValue;
    private readonly InputAction m_RightHandInteraction_Interact;
    private readonly InputAction m_RightHandInteraction_InteractValue;
    private readonly InputAction m_RightHandInteraction_UIPress;
    private readonly InputAction m_RightHandInteraction_UIPressValue;
    private readonly InputAction m_RightHandInteraction_UIScroll;
    private readonly InputAction m_RightHandInteraction_RotateAnchor;
    private readonly InputAction m_RightHandInteraction_TranslateAnchor;
    private readonly InputAction m_RightHandInteraction_ScaleToggle;
    private readonly InputAction m_RightHandInteraction_ScaleDelta;
    public struct RightHandInteractionActions
    {
        private @MainInputActions m_Wrapper;
        public RightHandInteractionActions(@MainInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grab => m_Wrapper.m_RightHandInteraction_Grab;
        public InputAction @GrabValue => m_Wrapper.m_RightHandInteraction_GrabValue;
        public InputAction @Interact => m_Wrapper.m_RightHandInteraction_Interact;
        public InputAction @InteractValue => m_Wrapper.m_RightHandInteraction_InteractValue;
        public InputAction @UIPress => m_Wrapper.m_RightHandInteraction_UIPress;
        public InputAction @UIPressValue => m_Wrapper.m_RightHandInteraction_UIPressValue;
        public InputAction @UIScroll => m_Wrapper.m_RightHandInteraction_UIScroll;
        public InputAction @RotateAnchor => m_Wrapper.m_RightHandInteraction_RotateAnchor;
        public InputAction @TranslateAnchor => m_Wrapper.m_RightHandInteraction_TranslateAnchor;
        public InputAction @ScaleToggle => m_Wrapper.m_RightHandInteraction_ScaleToggle;
        public InputAction @ScaleDelta => m_Wrapper.m_RightHandInteraction_ScaleDelta;
        public InputActionMap Get() { return m_Wrapper.m_RightHandInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandInteractionActions set) { return set.Get(); }
        public void AddCallbacks(IRightHandInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandInteractionActionsCallbackInterfaces.Add(instance);
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @GrabValue.started += instance.OnGrabValue;
            @GrabValue.performed += instance.OnGrabValue;
            @GrabValue.canceled += instance.OnGrabValue;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @InteractValue.started += instance.OnInteractValue;
            @InteractValue.performed += instance.OnInteractValue;
            @InteractValue.canceled += instance.OnInteractValue;
            @UIPress.started += instance.OnUIPress;
            @UIPress.performed += instance.OnUIPress;
            @UIPress.canceled += instance.OnUIPress;
            @UIPressValue.started += instance.OnUIPressValue;
            @UIPressValue.performed += instance.OnUIPressValue;
            @UIPressValue.canceled += instance.OnUIPressValue;
            @UIScroll.started += instance.OnUIScroll;
            @UIScroll.performed += instance.OnUIScroll;
            @UIScroll.canceled += instance.OnUIScroll;
            @RotateAnchor.started += instance.OnRotateAnchor;
            @RotateAnchor.performed += instance.OnRotateAnchor;
            @RotateAnchor.canceled += instance.OnRotateAnchor;
            @TranslateAnchor.started += instance.OnTranslateAnchor;
            @TranslateAnchor.performed += instance.OnTranslateAnchor;
            @TranslateAnchor.canceled += instance.OnTranslateAnchor;
            @ScaleToggle.started += instance.OnScaleToggle;
            @ScaleToggle.performed += instance.OnScaleToggle;
            @ScaleToggle.canceled += instance.OnScaleToggle;
            @ScaleDelta.started += instance.OnScaleDelta;
            @ScaleDelta.performed += instance.OnScaleDelta;
            @ScaleDelta.canceled += instance.OnScaleDelta;
        }

        private void UnregisterCallbacks(IRightHandInteractionActions instance)
        {
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @GrabValue.started -= instance.OnGrabValue;
            @GrabValue.performed -= instance.OnGrabValue;
            @GrabValue.canceled -= instance.OnGrabValue;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @InteractValue.started -= instance.OnInteractValue;
            @InteractValue.performed -= instance.OnInteractValue;
            @InteractValue.canceled -= instance.OnInteractValue;
            @UIPress.started -= instance.OnUIPress;
            @UIPress.performed -= instance.OnUIPress;
            @UIPress.canceled -= instance.OnUIPress;
            @UIPressValue.started -= instance.OnUIPressValue;
            @UIPressValue.performed -= instance.OnUIPressValue;
            @UIPressValue.canceled -= instance.OnUIPressValue;
            @UIScroll.started -= instance.OnUIScroll;
            @UIScroll.performed -= instance.OnUIScroll;
            @UIScroll.canceled -= instance.OnUIScroll;
            @RotateAnchor.started -= instance.OnRotateAnchor;
            @RotateAnchor.performed -= instance.OnRotateAnchor;
            @RotateAnchor.canceled -= instance.OnRotateAnchor;
            @TranslateAnchor.started -= instance.OnTranslateAnchor;
            @TranslateAnchor.performed -= instance.OnTranslateAnchor;
            @TranslateAnchor.canceled -= instance.OnTranslateAnchor;
            @ScaleToggle.started -= instance.OnScaleToggle;
            @ScaleToggle.performed -= instance.OnScaleToggle;
            @ScaleToggle.canceled -= instance.OnScaleToggle;
            @ScaleDelta.started -= instance.OnScaleDelta;
            @ScaleDelta.performed -= instance.OnScaleDelta;
            @ScaleDelta.canceled -= instance.OnScaleDelta;
        }

        public void RemoveCallbacks(IRightHandInteractionActions instance)
        {
            if (m_Wrapper.m_RightHandInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightHandInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightHandInteractionActions @RightHandInteraction => new RightHandInteractionActions(this);

    // RightHand
    private readonly InputActionMap m_RightHand;
    private List<IRightHandActions> m_RightHandActionsCallbackInterfaces = new List<IRightHandActions>();
    private readonly InputAction m_RightHand_Position;
    private readonly InputAction m_RightHand_Rotation;
    private readonly InputAction m_RightHand_IsTracked;
    private readonly InputAction m_RightHand_TrackingState;
    private readonly InputAction m_RightHand_HapticDevice;
    private readonly InputAction m_RightHand_AimPosition;
    private readonly InputAction m_RightHand_AimRotation;
    private readonly InputAction m_RightHand_AimFlags;
    private readonly InputAction m_RightHand_PinchPosition;
    private readonly InputAction m_RightHand_PokePosition;
    private readonly InputAction m_RightHand_PokeRotation;
    private readonly InputAction m_RightHand_GripPosition;
    private readonly InputAction m_RightHand_GripRotation;
    public struct RightHandActions
    {
        private @MainInputActions m_Wrapper;
        public RightHandActions(@MainInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_RightHand_Position;
        public InputAction @Rotation => m_Wrapper.m_RightHand_Rotation;
        public InputAction @IsTracked => m_Wrapper.m_RightHand_IsTracked;
        public InputAction @TrackingState => m_Wrapper.m_RightHand_TrackingState;
        public InputAction @HapticDevice => m_Wrapper.m_RightHand_HapticDevice;
        public InputAction @AimPosition => m_Wrapper.m_RightHand_AimPosition;
        public InputAction @AimRotation => m_Wrapper.m_RightHand_AimRotation;
        public InputAction @AimFlags => m_Wrapper.m_RightHand_AimFlags;
        public InputAction @PinchPosition => m_Wrapper.m_RightHand_PinchPosition;
        public InputAction @PokePosition => m_Wrapper.m_RightHand_PokePosition;
        public InputAction @PokeRotation => m_Wrapper.m_RightHand_PokeRotation;
        public InputAction @GripPosition => m_Wrapper.m_RightHand_GripPosition;
        public InputAction @GripRotation => m_Wrapper.m_RightHand_GripRotation;
        public InputActionMap Get() { return m_Wrapper.m_RightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
        public void AddCallbacks(IRightHandActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @HapticDevice.started += instance.OnHapticDevice;
            @HapticDevice.performed += instance.OnHapticDevice;
            @HapticDevice.canceled += instance.OnHapticDevice;
            @AimPosition.started += instance.OnAimPosition;
            @AimPosition.performed += instance.OnAimPosition;
            @AimPosition.canceled += instance.OnAimPosition;
            @AimRotation.started += instance.OnAimRotation;
            @AimRotation.performed += instance.OnAimRotation;
            @AimRotation.canceled += instance.OnAimRotation;
            @AimFlags.started += instance.OnAimFlags;
            @AimFlags.performed += instance.OnAimFlags;
            @AimFlags.canceled += instance.OnAimFlags;
            @PinchPosition.started += instance.OnPinchPosition;
            @PinchPosition.performed += instance.OnPinchPosition;
            @PinchPosition.canceled += instance.OnPinchPosition;
            @PokePosition.started += instance.OnPokePosition;
            @PokePosition.performed += instance.OnPokePosition;
            @PokePosition.canceled += instance.OnPokePosition;
            @PokeRotation.started += instance.OnPokeRotation;
            @PokeRotation.performed += instance.OnPokeRotation;
            @PokeRotation.canceled += instance.OnPokeRotation;
            @GripPosition.started += instance.OnGripPosition;
            @GripPosition.performed += instance.OnGripPosition;
            @GripPosition.canceled += instance.OnGripPosition;
            @GripRotation.started += instance.OnGripRotation;
            @GripRotation.performed += instance.OnGripRotation;
            @GripRotation.canceled += instance.OnGripRotation;
        }

        private void UnregisterCallbacks(IRightHandActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @HapticDevice.started -= instance.OnHapticDevice;
            @HapticDevice.performed -= instance.OnHapticDevice;
            @HapticDevice.canceled -= instance.OnHapticDevice;
            @AimPosition.started -= instance.OnAimPosition;
            @AimPosition.performed -= instance.OnAimPosition;
            @AimPosition.canceled -= instance.OnAimPosition;
            @AimRotation.started -= instance.OnAimRotation;
            @AimRotation.performed -= instance.OnAimRotation;
            @AimRotation.canceled -= instance.OnAimRotation;
            @AimFlags.started -= instance.OnAimFlags;
            @AimFlags.performed -= instance.OnAimFlags;
            @AimFlags.canceled -= instance.OnAimFlags;
            @PinchPosition.started -= instance.OnPinchPosition;
            @PinchPosition.performed -= instance.OnPinchPosition;
            @PinchPosition.canceled -= instance.OnPinchPosition;
            @PokePosition.started -= instance.OnPokePosition;
            @PokePosition.performed -= instance.OnPokePosition;
            @PokePosition.canceled -= instance.OnPokePosition;
            @PokeRotation.started -= instance.OnPokeRotation;
            @PokeRotation.performed -= instance.OnPokeRotation;
            @PokeRotation.canceled -= instance.OnPokeRotation;
            @GripPosition.started -= instance.OnGripPosition;
            @GripPosition.performed -= instance.OnGripPosition;
            @GripPosition.canceled -= instance.OnGripPosition;
            @GripRotation.started -= instance.OnGripRotation;
            @GripRotation.performed -= instance.OnGripRotation;
            @GripRotation.canceled -= instance.OnGripRotation;
        }

        public void RemoveCallbacks(IRightHandActions instance)
        {
            if (m_Wrapper.m_RightHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightHandActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightHandActions @RightHand => new RightHandActions(this);

    // LeftHandLocomotion
    private readonly InputActionMap m_LeftHandLocomotion;
    private List<ILeftHandLocomotionActions> m_LeftHandLocomotionActionsCallbackInterfaces = new List<ILeftHandLocomotionActions>();
    private readonly InputAction m_LeftHandLocomotion_TeleportSelect;
    private readonly InputAction m_LeftHandLocomotion_TeleportModeActivate;
    private readonly InputAction m_LeftHandLocomotion_TeleportModeCancel;
    private readonly InputAction m_LeftHandLocomotion_TeleportDirection;
    private readonly InputAction m_LeftHandLocomotion_Turn;
    private readonly InputAction m_LeftHandLocomotion_Move;
    private readonly InputAction m_LeftHandLocomotion_GrabMove;
    private readonly InputAction m_LeftHandLocomotion_SnapTurn;
    public struct LeftHandLocomotionActions
    {
        private @MainInputActions m_Wrapper;
        public LeftHandLocomotionActions(@MainInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TeleportSelect => m_Wrapper.m_LeftHandLocomotion_TeleportSelect;
        public InputAction @TeleportModeActivate => m_Wrapper.m_LeftHandLocomotion_TeleportModeActivate;
        public InputAction @TeleportModeCancel => m_Wrapper.m_LeftHandLocomotion_TeleportModeCancel;
        public InputAction @TeleportDirection => m_Wrapper.m_LeftHandLocomotion_TeleportDirection;
        public InputAction @Turn => m_Wrapper.m_LeftHandLocomotion_Turn;
        public InputAction @Move => m_Wrapper.m_LeftHandLocomotion_Move;
        public InputAction @GrabMove => m_Wrapper.m_LeftHandLocomotion_GrabMove;
        public InputAction @SnapTurn => m_Wrapper.m_LeftHandLocomotion_SnapTurn;
        public InputActionMap Get() { return m_Wrapper.m_LeftHandLocomotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandLocomotionActions set) { return set.Get(); }
        public void AddCallbacks(ILeftHandLocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces.Add(instance);
            @TeleportSelect.started += instance.OnTeleportSelect;
            @TeleportSelect.performed += instance.OnTeleportSelect;
            @TeleportSelect.canceled += instance.OnTeleportSelect;
            @TeleportModeActivate.started += instance.OnTeleportModeActivate;
            @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
            @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
            @TeleportModeCancel.started += instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
            @TeleportDirection.started += instance.OnTeleportDirection;
            @TeleportDirection.performed += instance.OnTeleportDirection;
            @TeleportDirection.canceled += instance.OnTeleportDirection;
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @GrabMove.started += instance.OnGrabMove;
            @GrabMove.performed += instance.OnGrabMove;
            @GrabMove.canceled += instance.OnGrabMove;
            @SnapTurn.started += instance.OnSnapTurn;
            @SnapTurn.performed += instance.OnSnapTurn;
            @SnapTurn.canceled += instance.OnSnapTurn;
        }

        private void UnregisterCallbacks(ILeftHandLocomotionActions instance)
        {
            @TeleportSelect.started -= instance.OnTeleportSelect;
            @TeleportSelect.performed -= instance.OnTeleportSelect;
            @TeleportSelect.canceled -= instance.OnTeleportSelect;
            @TeleportModeActivate.started -= instance.OnTeleportModeActivate;
            @TeleportModeActivate.performed -= instance.OnTeleportModeActivate;
            @TeleportModeActivate.canceled -= instance.OnTeleportModeActivate;
            @TeleportModeCancel.started -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled -= instance.OnTeleportModeCancel;
            @TeleportDirection.started -= instance.OnTeleportDirection;
            @TeleportDirection.performed -= instance.OnTeleportDirection;
            @TeleportDirection.canceled -= instance.OnTeleportDirection;
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @GrabMove.started -= instance.OnGrabMove;
            @GrabMove.performed -= instance.OnGrabMove;
            @GrabMove.canceled -= instance.OnGrabMove;
            @SnapTurn.started -= instance.OnSnapTurn;
            @SnapTurn.performed -= instance.OnSnapTurn;
            @SnapTurn.canceled -= instance.OnSnapTurn;
        }

        public void RemoveCallbacks(ILeftHandLocomotionActions instance)
        {
            if (m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftHandLocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftHandLocomotionActions @LeftHandLocomotion => new LeftHandLocomotionActions(this);

    // LeftHandInteraction
    private readonly InputActionMap m_LeftHandInteraction;
    private List<ILeftHandInteractionActions> m_LeftHandInteractionActionsCallbackInterfaces = new List<ILeftHandInteractionActions>();
    private readonly InputAction m_LeftHandInteraction_Grab;
    private readonly InputAction m_LeftHandInteraction_GrabValue;
    private readonly InputAction m_LeftHandInteraction_Interact;
    private readonly InputAction m_LeftHandInteraction_InteractValue;
    private readonly InputAction m_LeftHandInteraction_UIPress;
    private readonly InputAction m_LeftHandInteraction_UIPressValue;
    private readonly InputAction m_LeftHandInteraction_UIScroll;
    private readonly InputAction m_LeftHandInteraction_RotateAnchor;
    private readonly InputAction m_LeftHandInteraction_TranslateAnchor;
    private readonly InputAction m_LeftHandInteraction_ScaleToggle;
    private readonly InputAction m_LeftHandInteraction_ScaleDelta;
    public struct LeftHandInteractionActions
    {
        private @MainInputActions m_Wrapper;
        public LeftHandInteractionActions(@MainInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grab => m_Wrapper.m_LeftHandInteraction_Grab;
        public InputAction @GrabValue => m_Wrapper.m_LeftHandInteraction_GrabValue;
        public InputAction @Interact => m_Wrapper.m_LeftHandInteraction_Interact;
        public InputAction @InteractValue => m_Wrapper.m_LeftHandInteraction_InteractValue;
        public InputAction @UIPress => m_Wrapper.m_LeftHandInteraction_UIPress;
        public InputAction @UIPressValue => m_Wrapper.m_LeftHandInteraction_UIPressValue;
        public InputAction @UIScroll => m_Wrapper.m_LeftHandInteraction_UIScroll;
        public InputAction @RotateAnchor => m_Wrapper.m_LeftHandInteraction_RotateAnchor;
        public InputAction @TranslateAnchor => m_Wrapper.m_LeftHandInteraction_TranslateAnchor;
        public InputAction @ScaleToggle => m_Wrapper.m_LeftHandInteraction_ScaleToggle;
        public InputAction @ScaleDelta => m_Wrapper.m_LeftHandInteraction_ScaleDelta;
        public InputActionMap Get() { return m_Wrapper.m_LeftHandInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandInteractionActions set) { return set.Get(); }
        public void AddCallbacks(ILeftHandInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftHandInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftHandInteractionActionsCallbackInterfaces.Add(instance);
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @GrabValue.started += instance.OnGrabValue;
            @GrabValue.performed += instance.OnGrabValue;
            @GrabValue.canceled += instance.OnGrabValue;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @InteractValue.started += instance.OnInteractValue;
            @InteractValue.performed += instance.OnInteractValue;
            @InteractValue.canceled += instance.OnInteractValue;
            @UIPress.started += instance.OnUIPress;
            @UIPress.performed += instance.OnUIPress;
            @UIPress.canceled += instance.OnUIPress;
            @UIPressValue.started += instance.OnUIPressValue;
            @UIPressValue.performed += instance.OnUIPressValue;
            @UIPressValue.canceled += instance.OnUIPressValue;
            @UIScroll.started += instance.OnUIScroll;
            @UIScroll.performed += instance.OnUIScroll;
            @UIScroll.canceled += instance.OnUIScroll;
            @RotateAnchor.started += instance.OnRotateAnchor;
            @RotateAnchor.performed += instance.OnRotateAnchor;
            @RotateAnchor.canceled += instance.OnRotateAnchor;
            @TranslateAnchor.started += instance.OnTranslateAnchor;
            @TranslateAnchor.performed += instance.OnTranslateAnchor;
            @TranslateAnchor.canceled += instance.OnTranslateAnchor;
            @ScaleToggle.started += instance.OnScaleToggle;
            @ScaleToggle.performed += instance.OnScaleToggle;
            @ScaleToggle.canceled += instance.OnScaleToggle;
            @ScaleDelta.started += instance.OnScaleDelta;
            @ScaleDelta.performed += instance.OnScaleDelta;
            @ScaleDelta.canceled += instance.OnScaleDelta;
        }

        private void UnregisterCallbacks(ILeftHandInteractionActions instance)
        {
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @GrabValue.started -= instance.OnGrabValue;
            @GrabValue.performed -= instance.OnGrabValue;
            @GrabValue.canceled -= instance.OnGrabValue;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @InteractValue.started -= instance.OnInteractValue;
            @InteractValue.performed -= instance.OnInteractValue;
            @InteractValue.canceled -= instance.OnInteractValue;
            @UIPress.started -= instance.OnUIPress;
            @UIPress.performed -= instance.OnUIPress;
            @UIPress.canceled -= instance.OnUIPress;
            @UIPressValue.started -= instance.OnUIPressValue;
            @UIPressValue.performed -= instance.OnUIPressValue;
            @UIPressValue.canceled -= instance.OnUIPressValue;
            @UIScroll.started -= instance.OnUIScroll;
            @UIScroll.performed -= instance.OnUIScroll;
            @UIScroll.canceled -= instance.OnUIScroll;
            @RotateAnchor.started -= instance.OnRotateAnchor;
            @RotateAnchor.performed -= instance.OnRotateAnchor;
            @RotateAnchor.canceled -= instance.OnRotateAnchor;
            @TranslateAnchor.started -= instance.OnTranslateAnchor;
            @TranslateAnchor.performed -= instance.OnTranslateAnchor;
            @TranslateAnchor.canceled -= instance.OnTranslateAnchor;
            @ScaleToggle.started -= instance.OnScaleToggle;
            @ScaleToggle.performed -= instance.OnScaleToggle;
            @ScaleToggle.canceled -= instance.OnScaleToggle;
            @ScaleDelta.started -= instance.OnScaleDelta;
            @ScaleDelta.performed -= instance.OnScaleDelta;
            @ScaleDelta.canceled -= instance.OnScaleDelta;
        }

        public void RemoveCallbacks(ILeftHandInteractionActions instance)
        {
            if (m_Wrapper.m_LeftHandInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftHandInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftHandInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftHandInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftHandInteractionActions @LeftHandInteraction => new LeftHandInteractionActions(this);

    // LeftHand
    private readonly InputActionMap m_LeftHand;
    private List<ILeftHandActions> m_LeftHandActionsCallbackInterfaces = new List<ILeftHandActions>();
    private readonly InputAction m_LeftHand_Position;
    private readonly InputAction m_LeftHand_Rotation;
    private readonly InputAction m_LeftHand_IsTracked;
    private readonly InputAction m_LeftHand_TrackingState;
    private readonly InputAction m_LeftHand_HapticDevice;
    private readonly InputAction m_LeftHand_AimPosition;
    private readonly InputAction m_LeftHand_AimRotation;
    private readonly InputAction m_LeftHand_AimFlags;
    private readonly InputAction m_LeftHand_PinchPosition;
    private readonly InputAction m_LeftHand_PokePosition;
    private readonly InputAction m_LeftHand_PokeRotation;
    private readonly InputAction m_LeftHand_GripPosition;
    private readonly InputAction m_LeftHand_GripRotation;
    public struct LeftHandActions
    {
        private @MainInputActions m_Wrapper;
        public LeftHandActions(@MainInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_LeftHand_Position;
        public InputAction @Rotation => m_Wrapper.m_LeftHand_Rotation;
        public InputAction @IsTracked => m_Wrapper.m_LeftHand_IsTracked;
        public InputAction @TrackingState => m_Wrapper.m_LeftHand_TrackingState;
        public InputAction @HapticDevice => m_Wrapper.m_LeftHand_HapticDevice;
        public InputAction @AimPosition => m_Wrapper.m_LeftHand_AimPosition;
        public InputAction @AimRotation => m_Wrapper.m_LeftHand_AimRotation;
        public InputAction @AimFlags => m_Wrapper.m_LeftHand_AimFlags;
        public InputAction @PinchPosition => m_Wrapper.m_LeftHand_PinchPosition;
        public InputAction @PokePosition => m_Wrapper.m_LeftHand_PokePosition;
        public InputAction @PokeRotation => m_Wrapper.m_LeftHand_PokeRotation;
        public InputAction @GripPosition => m_Wrapper.m_LeftHand_GripPosition;
        public InputAction @GripRotation => m_Wrapper.m_LeftHand_GripRotation;
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        public void AddCallbacks(ILeftHandActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftHandActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @HapticDevice.started += instance.OnHapticDevice;
            @HapticDevice.performed += instance.OnHapticDevice;
            @HapticDevice.canceled += instance.OnHapticDevice;
            @AimPosition.started += instance.OnAimPosition;
            @AimPosition.performed += instance.OnAimPosition;
            @AimPosition.canceled += instance.OnAimPosition;
            @AimRotation.started += instance.OnAimRotation;
            @AimRotation.performed += instance.OnAimRotation;
            @AimRotation.canceled += instance.OnAimRotation;
            @AimFlags.started += instance.OnAimFlags;
            @AimFlags.performed += instance.OnAimFlags;
            @AimFlags.canceled += instance.OnAimFlags;
            @PinchPosition.started += instance.OnPinchPosition;
            @PinchPosition.performed += instance.OnPinchPosition;
            @PinchPosition.canceled += instance.OnPinchPosition;
            @PokePosition.started += instance.OnPokePosition;
            @PokePosition.performed += instance.OnPokePosition;
            @PokePosition.canceled += instance.OnPokePosition;
            @PokeRotation.started += instance.OnPokeRotation;
            @PokeRotation.performed += instance.OnPokeRotation;
            @PokeRotation.canceled += instance.OnPokeRotation;
            @GripPosition.started += instance.OnGripPosition;
            @GripPosition.performed += instance.OnGripPosition;
            @GripPosition.canceled += instance.OnGripPosition;
            @GripRotation.started += instance.OnGripRotation;
            @GripRotation.performed += instance.OnGripRotation;
            @GripRotation.canceled += instance.OnGripRotation;
        }

        private void UnregisterCallbacks(ILeftHandActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @HapticDevice.started -= instance.OnHapticDevice;
            @HapticDevice.performed -= instance.OnHapticDevice;
            @HapticDevice.canceled -= instance.OnHapticDevice;
            @AimPosition.started -= instance.OnAimPosition;
            @AimPosition.performed -= instance.OnAimPosition;
            @AimPosition.canceled -= instance.OnAimPosition;
            @AimRotation.started -= instance.OnAimRotation;
            @AimRotation.performed -= instance.OnAimRotation;
            @AimRotation.canceled -= instance.OnAimRotation;
            @AimFlags.started -= instance.OnAimFlags;
            @AimFlags.performed -= instance.OnAimFlags;
            @AimFlags.canceled -= instance.OnAimFlags;
            @PinchPosition.started -= instance.OnPinchPosition;
            @PinchPosition.performed -= instance.OnPinchPosition;
            @PinchPosition.canceled -= instance.OnPinchPosition;
            @PokePosition.started -= instance.OnPokePosition;
            @PokePosition.performed -= instance.OnPokePosition;
            @PokePosition.canceled -= instance.OnPokePosition;
            @PokeRotation.started -= instance.OnPokeRotation;
            @PokeRotation.performed -= instance.OnPokeRotation;
            @PokeRotation.canceled -= instance.OnPokeRotation;
            @GripPosition.started -= instance.OnGripPosition;
            @GripPosition.performed -= instance.OnGripPosition;
            @GripPosition.canceled -= instance.OnGripPosition;
            @GripRotation.started -= instance.OnGripRotation;
            @GripRotation.performed -= instance.OnGripRotation;
            @GripRotation.canceled -= instance.OnGripRotation;
        }

        public void RemoveCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftHandActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftHandActions @LeftHand => new LeftHandActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Navigate;
    private readonly InputAction m_UI_Submit;
    private readonly InputAction m_UI_Cancel;
    private readonly InputAction m_UI_Point;
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_ScrollWheel;
    private readonly InputAction m_UI_MiddleClick;
    private readonly InputAction m_UI_RightClick;
    public struct UIActions
    {
        private @MainInputActions m_Wrapper;
        public UIActions(@MainInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
        public InputAction @Submit => m_Wrapper.m_UI_Submit;
        public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
        public InputAction @Point => m_Wrapper.m_UI_Point;
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputAction @ScrollWheel => m_Wrapper.m_UI_ScrollWheel;
        public InputAction @MiddleClick => m_Wrapper.m_UI_MiddleClick;
        public InputAction @RightClick => m_Wrapper.m_UI_RightClick;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @ScrollWheel.started += instance.OnScrollWheel;
            @ScrollWheel.performed += instance.OnScrollWheel;
            @ScrollWheel.canceled += instance.OnScrollWheel;
            @MiddleClick.started += instance.OnMiddleClick;
            @MiddleClick.performed += instance.OnMiddleClick;
            @MiddleClick.canceled += instance.OnMiddleClick;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @ScrollWheel.started -= instance.OnScrollWheel;
            @ScrollWheel.performed -= instance.OnScrollWheel;
            @ScrollWheel.canceled -= instance.OnScrollWheel;
            @MiddleClick.started -= instance.OnMiddleClick;
            @MiddleClick.performed -= instance.OnMiddleClick;
            @MiddleClick.canceled -= instance.OnMiddleClick;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_DefaultSchemeIndex = -1;
    public InputControlScheme DefaultScheme
    {
        get
        {
            if (m_DefaultSchemeIndex == -1) m_DefaultSchemeIndex = asset.FindControlSchemeIndex("Default");
            return asset.controlSchemes[m_DefaultSchemeIndex];
        }
    }
    public interface IHeadsetActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnIsTracked(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnEyeGazePosition(InputAction.CallbackContext context);
        void OnEyeGazeRotation(InputAction.CallbackContext context);
        void OnEyeGazeIsTracked(InputAction.CallbackContext context);
        void OnEyeGazeTrackingState(InputAction.CallbackContext context);
    }
    public interface IRightHandLocomotionActions
    {
        void OnTeleportSelect(InputAction.CallbackContext context);
        void OnTeleportModeActivate(InputAction.CallbackContext context);
        void OnTeleportModeCancel(InputAction.CallbackContext context);
        void OnTeleportDirection(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnGrabMove(InputAction.CallbackContext context);
        void OnSnapTurn(InputAction.CallbackContext context);
    }
    public interface IRightHandInteractionActions
    {
        void OnGrab(InputAction.CallbackContext context);
        void OnGrabValue(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnInteractValue(InputAction.CallbackContext context);
        void OnUIPress(InputAction.CallbackContext context);
        void OnUIPressValue(InputAction.CallbackContext context);
        void OnUIScroll(InputAction.CallbackContext context);
        void OnRotateAnchor(InputAction.CallbackContext context);
        void OnTranslateAnchor(InputAction.CallbackContext context);
        void OnScaleToggle(InputAction.CallbackContext context);
        void OnScaleDelta(InputAction.CallbackContext context);
    }
    public interface IRightHandActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnIsTracked(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnHapticDevice(InputAction.CallbackContext context);
        void OnAimPosition(InputAction.CallbackContext context);
        void OnAimRotation(InputAction.CallbackContext context);
        void OnAimFlags(InputAction.CallbackContext context);
        void OnPinchPosition(InputAction.CallbackContext context);
        void OnPokePosition(InputAction.CallbackContext context);
        void OnPokeRotation(InputAction.CallbackContext context);
        void OnGripPosition(InputAction.CallbackContext context);
        void OnGripRotation(InputAction.CallbackContext context);
    }
    public interface ILeftHandLocomotionActions
    {
        void OnTeleportSelect(InputAction.CallbackContext context);
        void OnTeleportModeActivate(InputAction.CallbackContext context);
        void OnTeleportModeCancel(InputAction.CallbackContext context);
        void OnTeleportDirection(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnGrabMove(InputAction.CallbackContext context);
        void OnSnapTurn(InputAction.CallbackContext context);
    }
    public interface ILeftHandInteractionActions
    {
        void OnGrab(InputAction.CallbackContext context);
        void OnGrabValue(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnInteractValue(InputAction.CallbackContext context);
        void OnUIPress(InputAction.CallbackContext context);
        void OnUIPressValue(InputAction.CallbackContext context);
        void OnUIScroll(InputAction.CallbackContext context);
        void OnRotateAnchor(InputAction.CallbackContext context);
        void OnTranslateAnchor(InputAction.CallbackContext context);
        void OnScaleToggle(InputAction.CallbackContext context);
        void OnScaleDelta(InputAction.CallbackContext context);
    }
    public interface ILeftHandActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnIsTracked(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnHapticDevice(InputAction.CallbackContext context);
        void OnAimPosition(InputAction.CallbackContext context);
        void OnAimRotation(InputAction.CallbackContext context);
        void OnAimFlags(InputAction.CallbackContext context);
        void OnPinchPosition(InputAction.CallbackContext context);
        void OnPokePosition(InputAction.CallbackContext context);
        void OnPokeRotation(InputAction.CallbackContext context);
        void OnGripPosition(InputAction.CallbackContext context);
        void OnGripRotation(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNavigate(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnScrollWheel(InputAction.CallbackContext context);
        void OnMiddleClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
    }
}
